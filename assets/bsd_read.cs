//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Global {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;
    using Microsoft.VisualBasic;
    using Microsoft.VisualBasic.Compatibility.VB6;
    using Microsoft.VisualBasic.Devices;
    using Microsoft.VisualBasic.FileIO;
    using Microsoft.VisualBasic.Logging;
    
    
    public class FileResult {
        
        public void ReadCheats(string PatchFile) {
            int pos;
            node nodex;
            //   On Local Error Resume Next
            tvCheats.Nodes.Clear();
            this.Caption = (("Apply Cheats [" + ExtractFile(PatchFile)) 
                        + "]");
            if (FileExists(PatchFile)) {
                LockWindowUpdate(this.hWnd);
                FixLineBreaks(PatchFile);
                fh = FileSystem.FreeFile;
                //     Open PatchFile For Input As #fh
                for (
                ; (FileSystem.EOF(fh) == false); 
                ) {
                    line = "";
                    //       Line Input #fh, line
                    line = Strings.Trim(line);
                    // -- remove remarks
                    pos = modVB6.InStrRev(line, ";");
                    if (pos) {
                        if (LikeOperator.LikeString(line, "; --- * ---", CompareMethod.Binary)) {
                            Group = Strings.Mid(line, 7, (Strings.Len(line) - 10));
                        }
                        else {
                            if (Strings.InStr(line, quote)) {
                                line = Strings.Trim(Strings.Left(line, modVB6.InStrRev(line, quote)));
                            }
                            else {
                                line = Strings.Trim(Strings.Left(line, (pos - 1)));
                            }
                        }
                    }
                    // --- General sections: :File / ; --- group --- / [cheat] / path: *
                    if (((LikeOperator.LikeString(line, "[0-9A-Fa-f]=*", CompareMethod.Binary) || LikeOperator.LikeString(line, "[0-9A-Fa-f][0-9A-Fa-f]=*", CompareMethod.Binary)) 
                                || LikeOperator.LikeString(line, "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]=*", CompareMethod.Binary))) {
                        tvCheats.Nodes.Remove(nodex.Index);
                        nodex = null;
                        // -- path: <required path pattern>
                    }
                    else {
                        if (LikeOperator.LikeString(Strings.LCase(line), "path:*", CompareMethod.Binary)) {
                            line = ("\\" + NormalizePath(Strings.Trim(Strings.Mid(line, 6))));
                            if (LikeOperator.LikeString(Strings.LCase(Strings.Right(NormalizePath(savepath), Strings.Len(line))), Strings.LCase(line), CompareMethod.Binary)) {
break;
                            }
                            // -- group (alternative format)
                        }
                        else {
                            if (LikeOperator.LikeString(line, "; --- * ---", CompareMethod.Binary)) {
                                line = Strings.Mid(line, 7, (Strings.Len(line) - 10));
                                Group = line;
                                if (LikeOperator.LikeString(Group, "*\\*", CompareMethod.Binary)) {
                                    Data = modVB6.Split(Group, "\\");
                                    line = Data[Information.UBound(Data)];
                                    nodex = tvCheats.Nodes.Add(tvCheats.Nodes(Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                            - 1))), tvwChild, Group, line);
                                }
                                else {
                                    nodex = tvCheats.Nodes.Add(null, null, Group, Group);
                                }
                                nodex.Bold = true;
                                nodex.Expanded = true;
                                // -- cheat label
                            }
                            else {
                                if (LikeOperator.LikeString(line, VariableMask, CompareMethod.Binary)) {
                                    line = RemoveBrackets(line);
                                    // -- group label
                                    if (LikeOperator.LikeString(Strings.LCase(line), "group:*", CompareMethod.Binary)) {
                                        line = Strings.Trim(Strings.Mid(line, 7));
                                        Group = line;
                                        if ((Group == "\\")) {
                                            Group = "";
                                            nodex = null;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Group, "*\\*", CompareMethod.Binary)) {
                                                Data = modVB6.Split(Group, "\\");
                                                line = Data[Information.UBound(Data)];
                                                nodex = tvCheats.Nodes.Add(tvCheats.Nodes(Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                                        - 1))), tvwChild, Group, line);
                                            }
                                            else {
                                                nodex = tvCheats.Nodes.Add(null, null, Group, Group);
                                            }
                                        }
                                        if ((nodex.Key == Group)) {
                                            nodex.Bold = true;
                                        }
                                        nodex.Expanded = true;
                                    }
                                    else {
                                        if (((Strings.Len(Group) > 0) 
                                                    && (LikeOperator.LikeString(line, "*\\*", CompareMethod.Binary) == false))) {
                                            if ((Strings.Len(tvCheats.Nodes(line)) == 0)) {
                                                nodex = tvCheats.Nodes.Add(Group, tvwChild, line, line);
                                            }
                                            else {
                                                nodex = tvCheats.Nodes.Add(Group, tvwChild, null, line);
                                            }
                                            nodex.Expanded = true;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(line, "*\\*", CompareMethod.Binary)) {
                                                Data = modVB6.Split(line, "\\");
                                                Group = line;
                                                line = Data[Information.UBound(Data)];
                                                Group = Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                                - 1));
                                                if ((Strings.Len(Group) == 0)) {
                                                    nodex = tvCheats.Nodes.Add(null, null, line, line);
                                                    nodex.Expanded = true;
                                                }
                                                else {
                                                    if ((Strings.Len(tvCheats.Nodes(Group)) == 0)) {
                                                        for (i = 1; (i <= tvCheats.Nodes.Count); i = (i + 1)) {
                                                            if ((tvCheats.Nodes(i).Text == Group)) {
                                                                nodex = tvCheats.Nodes.Add(tvCheats.Nodes(i), tvwChild, line, line);
                                                                nodex.Expanded = true;
break;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        nodex = tvCheats.Nodes.Add(tvCheats.Nodes(Group), tvwChild, line, line);
                                                        nodex.Expanded = true;
                                                    }
                                                }
                                            }
                                            else {
                                                nodex = tvCheats.Nodes.Add(null, null, null, line);
                                                nodex.Expanded = true;
                                            }
                                        }
                                    }
                                    // -- checkmark cheat on load
                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "default:*", CompareMethod.Binary)) {
                                        nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                        nodex.Checked = true;
                                    }
                                    else {
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*(required)", CompareMethod.Binary)) {
                                            nodex.Checked = true;
                                        }
                                    }
                                    // -- label background color
                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "yellow:*", CompareMethod.Binary)) {
                                        nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 8));
                                        nodex.BackColor = vbYellow;
                                    }
                                    else {
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "green:*", CompareMethod.Binary)) {
                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 7));
                                            nodex.BackColor = vbGreen;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "blue:*", CompareMethod.Binary)) {
                                                nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                nodex.BackColor = vbBlue;
                                                nodex.ForeColor = vbWhite;
                                            }
                                            else {
                                                if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "red:*", CompareMethod.Binary)) {
                                                    nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 5));
                                                    nodex.BackColor = vbRed;
                                                    nodex.ForeColor = vbWhite;
                                                }
                                                else {
                                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "orange:*", CompareMethod.Binary)) {
                                                        nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 8));
                                                        nodex.BackColor = 33023;
                                                    }
                                                    else {
                                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "cyan:*", CompareMethod.Binary)) {
                                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                            nodex.BackColor = vbCyan;
                                                        }
                                                        else {
                                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "magenta:*", CompareMethod.Binary)) {
                                                                nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                                                nodex.BackColor = vbMagenta;
                                                            }
                                                            else {
                                                                if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "gray:*", CompareMethod.Binary)) {
                                                                    nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                                    nodex.BackColor = 12632256;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    // -- label info / checkmarked
                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "info:*", CompareMethod.Binary)) {
                                        nodex.Bold = true;
                                    }
                                    else {
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "default:*", CompareMethod.Binary)) {
                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                            nodex.Checked = true;
                                        }
                                    }
                                    // -- label foreground color by status
                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*partial*working*", CompareMethod.Binary)) {
                                        nodex.ForeColor = 33023;
                                    }
                                    else {
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*not working*", CompareMethod.Binary)) {
                                            nodex.ForeColor = vbRed;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*working*", CompareMethod.Binary)) {
                                                nodex.ForeColor = vbBlue;
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (LikeOperator.LikeString(line, "[A-Za-z]*", CompareMethod.Binary)) {
                                        if (LikeOperator.LikeString(line, "[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9" +
                                                "A-Fa-f] [0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-" +
                                                "Fa-f][0-9A-Fa-f]", CompareMethod.Binary)) {
                                            // do not add game genie codes starting with letters
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(line), "carry[ (]*", CompareMethod.Binary)) {
                                                // do not add set commands as cheat names
                                            }
                                            else {
                                                if (LikeOperator.LikeString(Strings.LCase(line), "set *:*", CompareMethod.Binary)) {
                                                    // do not add set commands as cheat names
                                                }
                                                else {
                                                    if (LikeOperator.LikeString(Strings.LCase(line), "write *:*", CompareMethod.Binary)) {
                                                        // do not add set commands as cheat names
                                                    }
                                                    else {
                                                        if (LikeOperator.LikeString(Strings.LCase(line), "insert *:*", CompareMethod.Binary)) {
                                                            // do not add set commands as cheat names
                                                        }
                                                        else {
                                                            if (LikeOperator.LikeString(Strings.LCase(line), "delete *:*", CompareMethod.Binary)) {
                                                                // do not add set commands as cheat names
                                                            }
                                                            else {
                                                                if (LikeOperator.LikeString(Strings.LCase(line), "search *", CompareMethod.Binary)) {
                                                                    // do not add set commands as cheat names
                                                                }
                                                                else {
                                                                    if (LikeOperator.LikeString(Strings.LCase(line), "copy *", CompareMethod.Binary)) {
                                                                        // do not add set commands as cheat names
                                                                    }
                                                                    else {
                                                                        if (LikeOperator.LikeString(Strings.LCase(line), "compress *", CompareMethod.Binary)) {
                                                                            // do not add set commands as cheat names
                                                                        }
                                                                        else {
                                                                            if (LikeOperator.LikeString(Strings.LCase(line), "decompress *", CompareMethod.Binary)) {
                                                                                // do not add set commands as cheat names
                                                                            }
                                                                            else {
                                                                                if (LikeOperator.LikeString(Strings.LCase(line), "msgbox *", CompareMethod.Binary)) {
                                                                                    // do not add set commands as cheat names
                                                                                }
                                                                                else {
                                                                                    // -- group label
                                                                                    if (LikeOperator.LikeString(Strings.LCase(line), "group:*", CompareMethod.Binary)) {
                                                                                        line = Strings.Trim(Strings.Mid(line, 7));
                                                                                        Group = line;
                                                                                        if (((Group == "\\") 
                                                                                                    || (Group == ""))) {
                                                                                            Group = "";
                                                                                            nodex = null;
                                                                                        }
                                                                                        else {
                                                                                            if (LikeOperator.LikeString(Group, "*\\*", CompareMethod.Binary)) {
                                                                                                Data = modVB6.Split(Group, "\\");
                                                                                                line = Data[Information.UBound(Data)];
                                                                                                nodex = tvCheats.Nodes.Add(tvCheats.Nodes(Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                                                                                        - 1))), tvwChild, Group, line);
                                                                                                tvCheats.Nodes(Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                                                                                    - 1))).Bold = true;
                                                                                                tvCheats.Nodes(Strings.Left(Group, ((Strings.Len(Group) - Strings.Len(line)) 
                                                                                                                    - 1))).Expanded = true;
                                                                                            }
                                                                                            else {
                                                                                                nodex = tvCheats.Nodes.Add(null, null, Group, Group);
                                                                                            }
                                                                                        }
                                                                                        nodex.Bold = true;
                                                                                        nodex.Expanded = true;
                                                                                    }
                                                                                    else {
                                                                                        if (Strings.Len(Group)) {
                                                                                            nodex = tvCheats.Nodes.Add(Group, tvwChild, null, line);
                                                                                            nodex.Expanded = true;
                                                                                        }
                                                                                        else {
                                                                                            nodex = tvCheats.Nodes.Add(null, null, null, line);
                                                                                            nodex.Expanded = true;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        // -- checkmark cheat on load
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "default:*", CompareMethod.Binary)) {
                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                            nodex.Checked = true;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*(required)", CompareMethod.Binary)) {
                                                nodex.Checked = true;
                                            }
                                        }
                                        // -- label background color
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "yellow:*", CompareMethod.Binary)) {
                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 8));
                                            nodex.BackColor = vbYellow;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "green:*", CompareMethod.Binary)) {
                                                nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 7));
                                                nodex.BackColor = vbGreen;
                                            }
                                            else {
                                                if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "blue:*", CompareMethod.Binary)) {
                                                    nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                    nodex.BackColor = vbBlue;
                                                    nodex.ForeColor = vbWhite;
                                                }
                                                else {
                                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "red:*", CompareMethod.Binary)) {
                                                        nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 5));
                                                        nodex.BackColor = vbRed;
                                                        nodex.ForeColor = vbWhite;
                                                    }
                                                    else {
                                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "orange:*", CompareMethod.Binary)) {
                                                            nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 8));
                                                            nodex.BackColor = 33023;
                                                        }
                                                        else {
                                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "cyan:*", CompareMethod.Binary)) {
                                                                nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                                nodex.BackColor = vbCyan;
                                                            }
                                                            else {
                                                                if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "magenta:*", CompareMethod.Binary)) {
                                                                    nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                                                    nodex.BackColor = vbMagenta;
                                                                }
                                                                else {
                                                                    if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "gray:*", CompareMethod.Binary)) {
                                                                        nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 6));
                                                                        nodex.BackColor = 12632256;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        // -- label info / checkmarked
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "info:*", CompareMethod.Binary)) {
                                            nodex.Bold = true;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "default:*", CompareMethod.Binary)) {
                                                nodex.Text = Strings.Trim(Strings.Mid(nodex.Text, 9));
                                                nodex.Checked = true;
                                            }
                                        }
                                        // -- label foreground color by status
                                        if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*partial working*", CompareMethod.Binary)) {
                                            nodex.ForeColor = 33023;
                                        }
                                        else {
                                            if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*not working*", CompareMethod.Binary)) {
                                                nodex.ForeColor = vbRed;
                                            }
                                            else {
                                                if (LikeOperator.LikeString(Strings.LCase(nodex.Text), "*working*", CompareMethod.Binary)) {
                                                    nodex.ForeColor = vbBlue;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //     Close #fh
                LockWindowUpdate(0);
            }
            if ((tvCheats.Nodes.Count == 0)) {
                btnApply.Enabled = false;
                tvCheats.Nodes.Add(null, null, null, "(There are not cheats not available)");
                tvCheats.Enabled = false;
            }
            else {
                if ((tvCheats.Nodes.Count == 1)) {
                    tvCheats.Enabled = true;
                    tvCheats.Nodes(1).Checked = true;
                    btnApply.Enabled = true;
                    btnApply.@default = true;
                }
                else {
                    tvCheats.Enabled = true;
                    btnApply.Enabled = true;
                    btnApply.@default = true;
                }
            }
            tvCheats.SelectedItem = tvCheats.Nodes(1);
            tvCheats.SelectedItem.EnsureVisible();
        }
    }
}
